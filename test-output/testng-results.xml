<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="1" total="15" passed="13">
  <reporter-output>
    <line>
      <![CDATA[Login]]>
    </line>
    <line>
      <![CDATA[Login]]>
    </line>
    <line>
      <![CDATA[Register]]>
    </line>
    <line>
      <![CDATA[Delete User]]>
    </line>
    <line>
      <![CDATA[Login]]>
    </line>
  </reporter-output>
  <suite name="Suite" duration-ms="66" started-at="2020-12-19T06:27:55Z" finished-at="2020-12-19T06:27:55Z">
    <groups>
      <group name="regression">
        <method signature="TestAlwaysRunParameter.deleteUser()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="deleteUser" class="test.TestAlwaysRunParameter"/>
        <method signature="TestAlwaysRunParameter.register()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="register" class="test.TestAlwaysRunParameter"/>
        <method signature="TestAlwaysRunParameter.login()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="login" class="test.TestAlwaysRunParameter"/>
        <method signature="TestInvocationCountParameter.login()[pri:0, instance:test.TestInvocationCountParameter@3e6fa38a]" name="login" class="test.TestInvocationCountParameter"/>
        <method signature="TestInvocationCountParameter.register()[pri:0, instance:test.TestInvocationCountParameter@3e6fa38a]" name="register" class="test.TestInvocationCountParameter"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="TestDependsOnMethod.register()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="register" class="test.TestDependsOnMethod"/>
        <method signature="TestDependsOnMethod.login()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="login" class="test.TestDependsOnMethod"/>
        <method signature="TestExecutionOrder.test01()[pri:1, instance:test.TestExecutionOrder@47c62251]" name="test01" class="test.TestExecutionOrder"/>
        <method signature="TestExecutionOrder.test02()[pri:2, instance:test.TestExecutionOrder@47c62251]" name="test02" class="test.TestExecutionOrder"/>
        <method signature="TestExecutionOrder.test03()[pri:3, instance:test.TestExecutionOrder@47c62251]" name="test03" class="test.TestExecutionOrder"/>
        <method signature="TestExecutionOrder.test04()[pri:4, instance:test.TestExecutionOrder@47c62251]" name="test04" class="test.TestExecutionOrder"/>
        <method signature="TestExecutionOrder.test05()[pri:5, instance:test.TestExecutionOrder@47c62251]" name="test05" class="test.TestExecutionOrder"/>
        <method signature="TestDependsOnMethod.deleteUser()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="deleteUser" class="test.TestDependsOnMethod"/>
      </group> <!-- smoke -->
    </groups>
    <test name="Test" duration-ms="66" started-at="2020-12-19T06:27:55Z" finished-at="2020-12-19T06:27:55Z">
      <class name="test.TestInvocationCountParameter">
        <test-method status="PASS" signature="login()[pri:0, instance:test.TestInvocationCountParameter@3e6fa38a]" name="login" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
            <line>
              <![CDATA[Login]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="login()[pri:0, instance:test.TestInvocationCountParameter@3e6fa38a]" name="login" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
            <line>
              <![CDATA[Login]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="register()[pri:0, instance:test.TestInvocationCountParameter@3e6fa38a]" name="register" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
            <line>
              <![CDATA[Register]]>
            </line>
          </reporter-output>
        </test-method> <!-- register -->
      </class> <!-- test.TestInvocationCountParameter -->
      <class name="test.TestAlwaysRunParameter">
        <test-method status="PASS" signature="deleteUser()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="deleteUser" duration-ms="2" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
            <line>
              <![CDATA[Delete User]]>
            </line>
          </reporter-output>
        </test-method> <!-- deleteUser -->
        <test-method status="FAIL" signature="register()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="register" duration-ms="2" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <exception class="java.lang.AssertionError">
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 
	at org.testng.AssertJUnit.fail(AssertJUnit.java:59)
	at org.testng.AssertJUnit.fail(AssertJUnit.java:66)
	at test.TestAlwaysRunParameter.register(TestAlwaysRunParameter.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="login()[pri:0, instance:test.TestAlwaysRunParameter@66a3ffec]" name="login" duration-ms="1" started-at="2020-12-19T11:57:55Z" depends-on-methods="test.TestAlwaysRunParameter.register" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
            <line>
              <![CDATA[Login]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
      </class> <!-- test.TestAlwaysRunParameter -->
      <class name="test.TestDependsOnMethod">
        <test-method status="PASS" signature="register()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="register" duration-ms="8" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="deleteUser()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="deleteUser" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser -->
        <test-method status="PASS" signature="login()[pri:0, instance:test.TestDependsOnMethod@59f99ea]" name="login" duration-ms="1" started-at="2020-12-19T11:57:55Z" depends-on-methods="test.TestDependsOnMethod.register" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
      </class> <!-- test.TestDependsOnMethod -->
      <class name="test.TestExecutionOrder">
        <test-method status="PASS" signature="test01()[pri:1, instance:test.TestExecutionOrder@47c62251]" name="test01" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test01 -->
        <test-method status="PASS" signature="test02()[pri:2, instance:test.TestExecutionOrder@47c62251]" name="test02" duration-ms="2" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test02 -->
        <test-method status="PASS" signature="test03()[pri:3, instance:test.TestExecutionOrder@47c62251]" name="test03" duration-ms="1" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test03 -->
        <test-method status="PASS" signature="test04()[pri:4, instance:test.TestExecutionOrder@47c62251]" name="test04" duration-ms="2" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test04 -->
        <test-method status="PASS" signature="test05()[pri:5, instance:test.TestExecutionOrder@47c62251]" name="test05" duration-ms="2" started-at="2020-12-19T11:57:55Z" finished-at="2020-12-19T11:57:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test05 -->
      </class> <!-- test.TestExecutionOrder -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
